name: Deploy Frontend

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  test-and-lint:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Install dependencies
        run: npm install

      - name: Run unit test
        run: npm run test

      - name: Run linter
        run: npm run lint

      - name: Check package version
        run: |
          CURRENT_VERSION=$(jq -r '.version' package.json)
          PREV_VERSION=$(git show origin/${{ github.event.pull_request.base.ref }}:package.json | jq -r '.version')
          if [ "$CURRENT_VERSION" = "$PREV_VERSION" ]; then
            echo "ERROR: package.json version has NOT updated"
            exit 1
          fi

  deploy:
    runs-on: ubuntu-latest
    if: github.event_name == 'push'

    steps:
      - name: Checkout Front Repository
        uses: actions/checkout@v3

      - name: Extract version
        run: |
          VERSION=$(node -p "require('./package.json').version")
          echo "Extracted version: $VERSION"
          echo "VERSION=$VERSION" >> $GITHUB_ENV

      - name: Deploy Front via SSH
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: ${{ secrets.SSH_PORT }}
          script: |
            cd ~/ystudent/ystudent-front
            git pull origin main
            NEW_VERSION=$(jq -r '.version' package.json)
            git tag -a "v$NEW_VERSION" -m "Release version $NEW_VERSION"
            git push origin "v$NEW_VERSION"
            docker compose -f ~/ystudent/docker-compose.yml build front
            docker compose -f ~/ystudent/docker-compose.yml up -d front
